/*short maze[] = new short[CountOfCellsOfMaze];
        int randomInt;

        for (short idx : maze) {
            idx = 15;
        }


        Random random = new Random();
        randomInt = random.nextInt(CountOfCellsOfMaze);

        System.out.println(findWay(randomInt));
    }

    public static int[] coordinateGetFromIndex(int index) {
        int coordinates[] = new int[2];

        coordinates[0] = index/(CountOfCellsOfMaze/8);
        coordinates[1] = index%(CountOfCellsOfMaze/8);

        return coordinates;
    }

    public static int indexGetFromCoordinate(int[] coordinate) {
        return coordinate[0]*8+coordinate[1];
    }

    public static Stack findWay(int startPosition) {
        Stack wayCells = new Stack();
//        ArrayList usedCells = new ArrayList();
        Random random = new Random();
        int finishPosition = random.nextInt(CountOfCellsOfMaze);

        System.out.println("startPosition: "+ startPosition);
        System.out.println("finishPosition: " + finishPosition);

        while (startPosition != finishPosition) {
            int[] coord = coordinateGetFromIndex(startPosition);
            int randWay = random.nextInt(4);
            System.out.println("pos: " + startPosition);
            System.out.println("randWay: " + randWay);


            if (wayCells.contains(startPosition)) {
                while (wayCells.contains(startPosition)) {
                    wayCells.pop();
                }
            }

            wayCells.push(startPosition);


            startPosition = indexGetFromCoordinate(coord);
        }
        wayCells.push(finishPosition);
        return wayCells;*/